import{_ as i,c as e,o as a,aA as t}from"./chunks/framework.Dsj6KQSd.js";const f=JSON.parse('{"title":"CodeSource","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),h={name:"index.md"};function n(l,s,k,p,d,r){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="CodeSource" tabindex="-1">CodeSource <a class="header-anchor" href="#CodeSource" aria-label="Permalink to &quot;CodeSource {#CodeSource}&quot;">â€‹</a></h1><p>This package provides two macros: <code>@code_src</code> and <code>@code_simple</code>. Both macros display the source code for the method that will be dispatched based on the evaluated types of the function arguments. The only difference between the two is that <code>@code_src</code> output uses syntax highlighting while <code>@code_simple</code> output is plain text.</p><p>See examples below:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CodeSource</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@code_src</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;">function</span><span style="--shiki-light:#afd700;--shiki-dark:#afd700;"> sum</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">r</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;">::</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;">AbstractRange</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">{</span><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;">&lt;:</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">Real</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">}</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    l</span><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;"> =</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;"> length</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">r</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span></span>
<span class="line"><span style="--shiki-light:#585858;--shiki-dark:#585858;">    # note that a little care is required to avoid overflow in l*(l-1)/2</span></span>
<span class="line"><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;">    return</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> l</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> *</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;"> first</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">r</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> +</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> (</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;">iseven</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">l</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;"> ?</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> (</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;">step</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">r</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> *</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> (</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">l</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">-</span><span style="--shiki-light:#af87ff;--shiki-dark:#af87ff;">1</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> *</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> (</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">l</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">&gt;&gt;</span><span style="--shiki-light:#af87ff;--shiki-dark:#af87ff;">1</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span></span>
<span class="line"><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;">                                     :</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> (</span><span style="--shiki-light:#5fd7ff;--shiki-dark:#5fd7ff;">step</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">r</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> *</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> l</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> *</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;"> (</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">(</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">l</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">-</span><span style="--shiki-light:#af87ff;--shiki-dark:#af87ff;">1</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">&gt;&gt;</span><span style="--shiki-light:#af87ff;--shiki-dark:#af87ff;">1</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">)</span></span>
<span class="line"><span style="--shiki-light:#ff005f;--shiki-dark:#ff005f;">end</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@code_simple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">function sum(r::AbstractRange{&lt;:Real})</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    l = length(r)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    # note that a little care is required to avoid overflow in l*(l-1)/2</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">    return l * first(r) + (iseven(l) ? (step(r) * (l-1)) * (l&gt;&gt;1)</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">                                     : (step(r) * l) * ((l-1)&gt;&gt;1))</span></span>
<span class="line"><span style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;">end</span></span></code></pre></div>`,7)]))}const o=i(h,[["render",n]]);export{f as __pageData,o as default};
